generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma/client"
}

generator fist {
  provider = "prisma-client-js"
  output   = "../dist/generated/prisma/client"
}

generator frontend_client {
  provider = "prisma-client-js"
  output   = "../../we-hate-the-ui/lib/prisma/client"
}

// enum CoinStatus {
//   STARTING_UP
//   OPEN
//   CLOSE_PENDING
//   CLOSED
// }

// generator typegraphql {
//   provider = "typegraphql-prisma"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Coin {
  bondingCurveId String   @id
  packageId      String   @unique
  module         String
  creator        String
  decimals       Int
  name           String
  symbol         String
  description    String   @default("")
  iconUrl        String   @default("")
  websiteUrl     String   @default("")
  twitterUrl     String   @default("")
  discordUrl     String   @default("")
  telegramUrl    String   @default("")
  whitepaperUrl  String   @default("")
  likes          Int      @default(0)
  target         BigInt   @default(0)
  status         Int      @default(0) // TODO this should be an enum type when we swap to postgres or mongo connector. Enum commented above
  trades         Trade[]
  suiReserve     BigInt   @default(0)
  // creatorUser   User     @relation(fields: [creator], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  posts          Post[] // Every coin has a thread that users can post to
  signature      String   @default("")
}

model Trade {
  id            Int      @id @default(autoincrement())
  suiAmount     BigInt
  coinAmount    BigInt
  isBuy         Boolean
  account       String
  coinId        String
  coin          Coin     @relation(fields: [coinId], references: [bondingCurveId])
  coinPrice     BigInt
  transactionId String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  // user          User     @relation(fields: [account], references: [id])
}

// model User {
//   id       String  @id // this is the user's address
//   avatar   String  @default("") // TODO later use a real default avatar here
//   username String
//   bio      String
//   likes    Int     @default(0)
//   trades   Trade[]
//   coins    Coin[]
//   posts    Post[]
// }

// Every coin has a thread
model Post {
  id        Int      @id @default(autoincrement())
  coinId    String
  authorId  String   @default("")
  text      String
  // text     String @db.VarChar(1000)
  likes     Int      @default(0)
  // author   User   @relation(fields: [authorId], references: [id])
  coin      Coin     @relation(fields: [coinId], references: [bondingCurveId])
  createdAt DateTime @default(now())
}
